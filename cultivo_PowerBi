import pandas as pd
from geopy.geocoders import Nominatim
from geopy.exc import GeocoderTimedOut, GeocoderServiceError
from tqdm import tqdm
import os

geolocator = Nominatim(user_agent="my_app", timeout=None)

def obtener_longitud_latitud(direccion):
    try:
        location = geolocator.geocode(direccion, timeout=10)
        if location:
            return location.latitude, location.longitude
    except (GeocoderTimedOut, GeocoderServiceError) as e:
        print(f"Error de geocodificación para la dirección '{direccion}': {str(e)}")
    return None, None

# Leer el archivo CSV
df = pd.read_csv("/home/jlinux/Escritorio/Tesis_2023/entradas_csv/Table1.csv", sep=",", encoding='utf-8')

# Crear una barra de progreso
total_rows = len(df)
progress_bar = tqdm(total=total_rows, desc="Geocodificación", unit="row")

# Agregar las columnas "Latitude" y "Longitude" al DataFrame
df["Latitude"] = None
df["Longitude"] = None

# Iterar sobre las filas del DataFrame
for index, row in df.iterrows():
    provincia = row["Provincia"]
    departamento = row["Departamento"]
    localidad = row["Localidad"]
    pais = row["País"]

    # Construir la dirección utilizando los datos de provincia, departamento, localidad y país
    direccion = f"{localidad}, {departamento}, {provincia}, {pais}"

    # Obtener latitud y longitud para la dirección
    latitud, longitud = obtener_longitud_latitud(direccion)

    # Actualizar los valores en el DataFrame si se obtuvieron las coordenadas
    if latitud and longitud:
        df.at[index, "Latitude"] = latitud
        df.at[index, "Longitude"] = longitud

    # Actualizar la barra de progreso
    progress_bar.update(1)

# Cerrar la barra de progreso
progress_bar.close()

# Agregar una columna "LocationID" como identificador único
df["LocationID"] = range(1, len(df) + 1)

# Generar un nombre de archivo CSV versionado
version = 1
output_file = f"/home/jlinux/Escritorio/Tesis_2023/Salidas_csv/salida_coordenadas_localidad_pais_v{version}.csv"
while os.path.exists(output_file):
    version += 1
    output_file = f"/home/jlinux/Escritorio/Tesis_2023/Salidas_csv/salida_coordenadas_localidad_pais_v{version}.csv"

# Reordenar las columnas para que "LocationID" esté al principio
df = df[["LocationID"] + list(df.columns.difference(["LocationID"]))]

# Guardar el DataFrame actualizado en el archivo CSV versionado
df.to_csv(output_file, index=False)
